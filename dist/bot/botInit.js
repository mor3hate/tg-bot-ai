"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.botCommand = void 0;
const createMessage_1 = require("./../openai/createMessage");
const commands_1 = require("../commands");
const botCommand = ({ bot, openai }) => {
    bot.launch();
    bot.start((ctx) => __awaiter(void 0, void 0, void 0, function* () {
        return yield ctx.replyWithHTML(`<b>–ü—Ä–∏–≤–µ—Ç!üëã</b>

  –≠—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ OpenAI, –∏–º–µ–Ω—É–µ–º–æ–π –∫–∞–∫ ChatGPT, –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞, –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, —ç—Å—Å–µ, –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. 

  –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å: <b>–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.üëá</b>`);
    }));
    bot.on('sticker', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
        return yield ctx.replyWithSticker('CAACAgQAAxkBAAEHUNhjx0E540Wijpp4g_7R2ZJHob70kwACggsAAlbgaFDqQettvqTomC0E');
    }));
    bot.help((ctx) => __awaiter(void 0, void 0, void 0, function* () { return yield ctx.reply(commands_1.commands); }));
    bot.command('art', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
        yield ctx.replyWithSticker('CAACAgIAAxkBAAEHUN9jx0lrYA4uPImFd3KwMFVmOOATmAAC1BEAA8CgSXknAeKPK_QMLQQ');
        yield ctx.reply('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    }));
    bot.on('text', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
        yield ctx.reply('I am thinking...');
        const message = yield (0, createMessage_1.createMessage)({
            openai: openai,
            //@ts-ignore
            message: ctx.message.text,
        });
        if (message) {
            yield ctx.reply(message, {
                reply_to_message_id: ctx.message.message_id,
            });
        }
    }));
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
};
exports.botCommand = botCommand;
//# sourceMappingURL=botInit.js.map